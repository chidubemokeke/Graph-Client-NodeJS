import type { MeshTransform } from '@graphql-mesh/types';
import type { DelegationContext } from '@graphql-tools/delegate';
import type { ExecutionRequest } from '@graphql-tools/utils';
import { ExecutionResult, GraphQLSchema } from 'graphql';
interface BlockTrackingTransformConfig {
    if?: boolean;
    validateSchema?: boolean;
    ignoreOperationNames?: string[];
    ignoreFieldNames?: string[];
    metaTypeName?: string;
    blockFieldName?: string;
    blockNumberFieldName?: string;
    metaRootFieldName?: string;
    blockArgumentName?: string;
    minBlockArgumentName?: string;
}
export default class BlockTrackingTransform implements MeshTransform {
    config: Required<BlockTrackingTransformConfig>;
    constructor({ config }?: {
        config?: BlockTrackingTransformConfig;
    });
    transformSchema(schema: GraphQLSchema): GraphQLSchema;
    transformRequest(executionRequest: ExecutionRequest, delegationContext: DelegationContext): ExecutionRequest;
    transformResult(originalResult: ExecutionResult<any>, delegationContext: DelegationContext): ExecutionResult;
}
export {};
